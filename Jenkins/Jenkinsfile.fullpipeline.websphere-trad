DID = "${env.DOCKER_REGISTRY}/dev-ubuntu:20180713"
GAUGE = "${env.DOCKER_REGISTRY}/gauge"

node('worker') {
  def mycontainer = docker.image(DID)
  def gauge_docker = docker.image(GAUGE)

  stage('Cloning repo...') {
    mycontainer.inside('-u root:root -v ${WORKSPACE}:/workdir -w /workdir') {
      sh 'rm -rf * || true'
      git 'https://github.com/codeurjc/latinia'
    }
  }
  stage('Instaling OJDBC Driver...') {
    mycontainer.inside('-u root:root -v ${WORKSPACE}:/workdir -v ${WORKSPACE}/m2:/root/.m2 -w /workdir') {
      sh 'cd websphere3 && mvn install:install-file -Dfile=ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar'
    }
  }
  
  stage('Compiling...') {
    mycontainer.inside('-u root:root -v ${WORKSPACE}:/workdir -v ${WORKSPACE}/m2:/root/.m2 -w /workdir') {
      sh 'cd websphere3 && mvn -DskipTests=true install package'
    }
  }

  stage('Building container...') {
    sh 'cd websphere3 && cp target/*.war sample1.war && docker build --no-cache=true -t websphere-trad-app .'
  }

  stage('Testing webapp') {
    withCredentials([string(credentialsId: '92cf8b6d-d622-4cb2-b27c-cd901b863570', variable: 'PASSWORD')]) {
    
      docker.image('websphere-trad-app').withRun("-u root:root --name websphere-trad -p 9043:9043 -p 9443:9443") { c ->
        gauge_docker.inside('--name gauge -u root:root -v /var/run/docker.sock:/var/run/docker.sock') {
          wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'xterm']) {
            sleep 60
            RES = sh (
              script: 'cd ${WORKSPACE}/websphere3/gauge && ./run_test.sh',
              returnStatus: true
            )
            archiveArtifacts 'reports.tar.gz'
            if (RES == 0) {
              echo "Success!"
            } else {
              echo "Hay errores en el test"
              error 'Test failed'
            }
          }
        }
      }
    }
  }

  stage('Uploading image...') {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'DOCKER_REGISTRY_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
      sh "docker tag websphere-trad-app ${env.DOCKER_REGISTRY}/websphere-trad-app"
      sh "docker login -u $USERNAME -p $PASSWORD ${env.DOCKER_REGISTRY}"
      sh "docker push ${env.DOCKER_REGISTRY}/websphere-trad-app"
    }
  }
}

