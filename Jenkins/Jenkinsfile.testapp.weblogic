DID = "${env.DOCKER_REGISTRY}/dev-ubuntu:20180713"

node('worker') {
  def mycontainer = docker.image(DID)

  stage('Cloning repo & adjusting permissions...') {
    mycontainer.inside('-u root:root -v ${WORKSPACE}:/workdir -w /workdir') {
      git 'https://github.com/codeurjc/latinia'
      sh 'mkdir -p oracle && chmod -R 777 oracle'
    }
  }
  stage('Building container...') {
    sh 'cd app && docker build --no-cache=true -t weblogic-app .'
  }
  stage('Testing webapp...') {
    withCredentials([string(credentialsId: '92cf8b6d-d622-4cb2-b27c-cd901b863570', variable: 'PASSWORD')]) {
    
      docker.image('weblogic-app').withRun("-u root:root --name wlsadmin -p 7001:7001 --hostname wlsadmin -e ADMIN_PASSWORD=$PASSWORD --env-file ${WORKSPACE}/app/domain.properties") { c ->
        mycontainer.inside('-u root:root -v /var/run/docker.sock:/var/run/docker.sock') {
          sleep 30
          RES = sh (
            script: 'curl --location --output /dev/null --silent --write-out "%{http_code}\\n" 172.17.0.1:7001/hello-world',
            returnStdout: true
          ).trim()
          if (RES == '200') {
            echo "Success!"
          } else {
            echo "El test ha fallado con el c√≥digo de salida ${RES}"
            error 'Test failed'
          }
        }
      }
    }
  }
  stage('Uploading image...') {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'DOCKER_REGISTRY_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
      sh "docker tag weblogic-app ${env.DOCKER_REGISTRY}/weblogic-app"
      sh "docker login -u $USERNAME -p $PASSWORD ${env.DOCKER_REGISTRY}"
      sh "docker push ${env.DOCKER_REGISTRY}/weblogic-app"
    }
  }
}





