DID = "${env.DOCKER_REGISTRY}/dev-ubuntu:20180713"

node('worker') {
  def mycontainer = docker.image(DID)

  mycontainer.pull()
  mycontainer.inside('-u root:root -v /var/run/docker.sock:/var/run/docker.sock') {
    stage('Cloning the repo...') {
      sh 'rm -rf spring-boot-mysql-example || true'
      sh 'git clone https://github.com/codeurjc/spring-boot-mysql-example'
    }
    stage('Installing...') {
      sh 'cd spring-boot-mysql-example && mvn -DskipTests=true install'
    }
    stage('Building...') {
      sh 'cd spring-boot-mysql-example && mvn -DskipTests=true clean package'
    }
    stage('Creating Docker image...') {
      sh 'cd spring-boot-mysql-example && ./build_image.sh'
    }
  }
  docker.image('mysql:5.7').withRun('--name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=r00t -e MYSQL_DATABASE=springboot_mysql_example') { c ->
    docker.image('spring-boot-mysql-example:latest').withRun('--name app -p 8080:8080 -e DB=172.17.0.1') { d ->
      mycontainer.inside('-u root:root -v /var/run/docker.sock:/var/run/docker.sock') {
        stage('Checking image...') {
          sleep 30
          RES = sh (
            script: 'curl --location --output /dev/null --silent --write-out "%{http_code}\\n" 172.17.0.1:8080',
            returnStdout: true
          ).trim()
        }
      }
    }
  }
  mycontainer.inside('-u root:root -v /var/run/docker.sock:/var/run/docker.sock') {
    stage('Uploading the image...') {
      if (RES == '200') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'DOCKER_REGISTRY_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
          sh "docker login -u $USERNAME -p $PASSWORD ${env.DOCKER_REGISTRY}"
          sh "docker tag spring-boot-mysql-example ${env.DOCKER_REGISTRY}/spring-boot-mysql-example"
          sh "docker push ${env.DOCKER_REGISTRY}/spring-boot-mysql-example"
        }
      }
      else {
        echo "El test ha fallado con el c√≥digo de salida ${RES}"
      }
    }
  }
}

